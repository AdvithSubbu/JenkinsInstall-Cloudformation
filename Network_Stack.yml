AWSTemplateFormatVersion  :  '2010-09-09'
Description               :  'This template creates the network resources'
Parameters                :  
  
  VPCCIDR                 :
    Description           :   CIDR for the VPC
    Default               :   10.0.0.0/16
    Type                  :   String
    MinLength             :   9
    MaxLength             :   18
    AllowedPattern        :   "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription :   must be a valid IP CIDR range of the form x.x.x.x/x.

Resources                 :

  VPCId                   :
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock           : !Ref VPCCIDR
      EnableDnsSupport    : true
      EnableDnsHostnames  : true
      InstanceTenancy     : default
      Tags:
      - Key: Name
        Value: Network-stack- {AWS::EC2::VPC::Id}

  JenkinsSecurityGroup      :
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host    
      VpcId:  !Ref VPCId      
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 73.169.18.136/32

  # Create InternetGateway
  InternetGateway     :
    Type: AWS::EC2::InternetGateway

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCId         
      InternetGatewayId: !Ref InternetGateway
       
    
  #Public Route Table to associate with subnet that needs to be public
  PublicRouteTable:
    Type: AWS::EC2::RouteTable    
    Properties:
      VpcId: !Ref VPCId        
 
  RouteToIGW:
    Type: AWS::EC2::Route    
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable            
      GatewayId: !Ref InternetGateway
       

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId        
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
       

  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCId
        

  NetworkAclInoundEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl        
      RuleNumber: 100
      RuleAction: allow
      Protocol: "-1"
      CidrBlock: 0.0.0.0/0

  NetworkAclOutboundEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl         
      RuleNumber  : 100
      RuleAction  : allow
      Protocol: "-1"
      Egress      : true
      CidrBlock   : 0.0.0.0/0

  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet        
      NetworkAclId: !Ref NetworkAcl
      
      
    

Outputs:  
  MyJekinsSG  :
    Description : Security Group for JenkinsSecurityGroup
    Value: !Ref  JenkinsSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-sg"
  PublicSubnet:
    Description: The ID of the Public subnet
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-SubnetID"
  StackVPC:
    Description: The ID of the VPC
    Value: !Ref VPCId
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"